/* adder.jj Para tokenizer*/

options{	
			STATIC=false;
		}
// Bloque de instrucciones para definir el Parser		
PARSER_BEGIN(adder)
class adder{
			public static void main(String[]args)
			throws ParseException, TokenMgrError{
			adder parser=new adder(System.in);
			parser.Start();										
				}
		}			
PARSER_END(adder)

//Inicio de estados léxicos

SKIP:{" " | "\n" | "\r" | "\r\n" | "\t"}


//Token para identificadores de usuario
TOKEN:{
	<IDREACH:"public "|"private "|"protected " > {System.out.println("IDREACH->"+image+"\r\n");}
	|<IDENTIFIER:["a"-"z","A"-"Z"] (["a"-"z","A"-"Z","0"-"9","_"])*>{System.out.println("IDENTIFIER ->"+image+"\r\n");}
	|<STRING : ["a"-"z","A"-"Z","0"-"9"](["a"-"z","A"-"Z","0"-"9"])*>{System.out.print("STRING -> "+image+"\r\n");}
	| <NUMBER : (["0"-"9"])+ > {System.out.print("NUM-> "+image+"\r\n");}
	}

	
	//Tokens de tipos de numeros
TOKEN:{
		<NUMTYPES:("int "|"byte "|"short "|"long "|"sbyte "|"ushort "|"ulong ")>{System.out.println("NUMTYPES-> "+image+"\r\n");}
		|<FLOATTYPE:("float "|"double "|"decimal ")>{System.out.println("FLOATTYPE-> "+image+"\r\n");}
		|<BOOLTYPE:"true "|"false ">{System.out.println("BOOLTYPE-> "+image+"\r\n");}
	}
	
TOKEN:
{
	<PROGRAM: "program " > {System.out.println("PROGRAM->"+image);}
	| <MAIN:"public static void main() "> {System.out.println(image);}
	

}
//Tokens de símbolos
TOKEN:
{
	<LPAR:"(">{System.out.println("LPAR->"+image);}
	| <RPAR:")">{System.out.println("RPAR->"+image);}
	| <LBRACE:"{">{System.out.println("LBRACE->"+image);}
	| <RBRACE:"}">{System.out.println("RBRACE->"+image);}
	| <SEMICOLON:";">{System.out.println("SEMICOL->"+image);}
}

//Tokens para bloques repetitivos, control de flujo
TOKEN:{
	<FOR:"for ">{System.out.println("FORLOOP-> "+image+"\r\n");}
	| <DO:"do ">{System.out.println("DOLOOP-> "+image+"\r\n");}
	|<WHILE:"while ">{System.out.println("WHILELOOP-> "+image+"\r\n");}	
}

//Tokens para operadores aritmeticos
TOKEN:{
	<EQUALS:"= ">{System.out.println("EQUALS-> "+image+"\r\n");}
	|<SUM:"+ ">{System.out.println("SUM-> "+image+"\r\n");}
	|<MINUS:"- ">{System.out.println("MINUS-> "+image+"\r\n");}
	|<MULT:"* ">{System.out.println("MULT->"+image+"\r\n");}
	|<DIVIDE:"/ ">{System.out.println("DIVIDE-> "+image+"\r\n");}
}

//Tokens de operadores relacionales
TOKEN:{
	<AND:"&& "|"bitand " >{System.out.println("AND-> "+image+"\r\n");}
	|<OR:"|| "|"bitor " >{System.out.println("OR-> "+image+"\r\n");}
	|<SAMEAS:"== " >{System.out.println("SAMEAS-> "+image+"\r\n");}
	|<GREATER:"> " >{System.out.println("GREATER-> "+image+"\r\n");}
	|<LESSER:"< " >{System.out.println("LESSER-> "+image+"\r\n");}
	|<GREATSAME:">= " >{System.out.println("GREATSAME-> "+image+"\r\n");}
	|<LESSAME:"<= " >{System.out.println("LESSAME-> "+image+"\r\n");}
	|<DIFFERENT:"<> " >{System.out.println("DIFFERENT-> "+image+"\r\n");}
}

//10 nuevos componentes lexicos Marco
//Tokens de tipo de valor
TOKEN:{
   <STRUCTTYPE:"struct " >{System.out.println("STRUCTTYPE-> "+image+"\r\n");}
   |<YOOLTYPE:"yool " >{System.out.println("VOIDTYPE-> "+image+"\r\n");}
}
//Tokens para declarar clase
TOKEN:{
   <LONG:"long " >{System.out.println("LONG-> "+image+"\r\n");}
   |<BOOL:"bool " >{System.out.println("BOOL-> "+image+"\r\n");}
}
//tokens  de etiquetas 
TOKEN:{
	<CASE:"case " >{System.out.println("CASE-> "+image+"\r\n");}
	|<ING:"ing " >{System.out.println("ING-> "+image+"\r\n");}
}
//tokens estructura repetitivas
TOKEN:{
    <FOREACH:"foreach " >{System.out.println("FOREACH-> "+image+"\r\n");}
    |<INGFER:"ingfer " >{System.out.println("INGFER-> "+image+"\r\n");}
}
//tokens de clausula
TOKEN:{
    <CATCH:"catch " >{System.out.println("CATCH-> "+image+"\r\n");}
    |<EXCEPT:"except " >{System.out.println("EXCEPT-> "+image+"\r\n");}
	|<RAISE:"raise " >{System.out.println("RAISE-> "+image+"\r\n");}
}


//Tokens de tipo de datos alfanumericos
TOKEN:{
	<STRINGTYPE:("string ")>{System.out.println("STRINGTYPE-> "+image+"\r\n");}
	|<CHARTYPE:("char ")>{System.out.println("CHARTYPE-> "+image+"\r\n");}
}

//Tokens para declarar metodos y clases
TOKEN:{
	<CLASSTYPE:"abstract |static | const | implements | clascy | class">{System.out.println("CLASSTYPE-> "+image+"\r\n");}
}

//Token de bloque try catch
TOKEN:{
	<TRYBLOCK:"try ">{System.out.println();}
}

//Token de imprimir a consola
TOKEN:{
	<PRINTOUT:"print | println | writeline"> {System.out.println("PRINTOUT-> "+image+"\r\n");}
}

//Token para delclaraciones de seleccion
TOKEN:{
	<IFSTRUCT: "if "> {System.out.println("IFSTRUCT-> "+image+"\r\n");}
	|<ELSE: "else "> {System.out.println("ELSE-> "+image+"\r\n");}
	|<SWITCHSTRUCT:"switch | stoom "> {System.out.println("SWITCHSTRUCT-> "+image+"\r\n");}
}
//Fin de estados léxicos

//Inicio de procedimientos para definir patrones

void Start():
{}
{
	<MAIN>
	|<LBRACE>
	|<RBRACE>
	|<NUMTYPES>
	|<IDENTIFIER>
	|<SEMICOLON>
	|<FLOATTYPE>
	|<IDENTIFIER>
	|<SEMICOLON>
	| <BOOLTYPE>	
	|<LPAR>
	|<RPAR>
	|<FOR> 
	| <DO> 
	| <WHILE>
	|<EQUALS>
	|<SUM>
	|<MINUS>
	|<MULT>
	|<DIVIDE>
	|<AND>
	|<OR>
	|<SAMEAS>
	|<GREATER>
	|<LESSER>
	|<GREATSAME>
	|<LESSAME>
	|<DIFFERENT>
	<STRUCTTYPE>
	|<VOIDTYPE>
	|<YOOLTYPE>
	| <LONG>
	|<BOOL>
	|<CHAR>
	|<CLASS>
	|<CASE>
	|<ING>
	| <FOREACH>
	|<INGFER>
	| <CATCH>
	|<EXCEPT>
	|<RAISE>
	|<IFSTRUCT>
	|<SWITCHSTRUCT>
	|<PRINTOUT>
	|<TRYBLOCK>
	|<CLASSTYPE>
	|<STRINGTYPE>
	|<CHARTYPE>
	|<ELSE>
	
}
/*
void Block():
{}
{
	Main()
}

void Main():
{}
{
	<MAIN>
	<LBRACE>Sentence()<RBRACE>
}

void Sentence():
{}
{
	<NUMTYPES><IDENTIFIER><SEMICOLON>
	|<FLOATTYPE><IDENTIFIER><SEMICOLON>
}

void NumberTypes():
{}
{
	<NUMTYPES> | <FLOATTYPE> | <BOOLTYPE>	
}

void Symbols():
{}
{
	<LPAR>|<RPAR>|<LBRACE>|<RBRACE>|<SEMICOLON>
}

void Loops():
{}
{
	<FOR> | <DO> | <WHILE>
}

void AritmOp():
{}
{
	<EQUALS>|<SUM>|<MINUS>|<MULT>|<DIVIDE>
}

void RelatOp():
{}
{
	<AND>|<OR>|<SAMEAS>|<GREATER>|<LESSER>|<GREATSAME>|<LESSAME>|<DIFFERENT>
}

void ValType():
{}
{
	<STRUCTTYPE>|<YOOLTYPE>
}
void DeclarClass():
{}
{ 
        <LONG>|<BOOL>|<CHAR>|<CLASS>
}
void EquiCase():
{}
{
        <CASE>|<ING>
}
void EstrucRep():
{}
{
        <FOREACH>|<INGFER>
}
void Clause():
{}
{
       <CATCH>|<EXCEPT>|<RAISE>
}

*/
